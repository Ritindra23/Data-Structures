#include<stdio.h>
#include<stdlib.h>
#define MAX 10
 
 struct queue
 {
 	int a[MAX];
 	int rear,front,count;
 };
 typedef struct queue Q;
 
 int main()
 {	int i,k;
 	Q q;
 	q.rear=q.front=-1;
 	q.count=0;
 	while(1)
	{	printf("Enter the below option to perform in stack :-\n");
		printf("1 : Enqueue\n2 : Dequeue\n3 : Display\n4 : Exit\n");
		scanf("%d",&i);
		
		switch(i)
		{
			case 1:{
				printf("Enter items to enqueue : ");
				scanf("%d",&k);
				enqueue(&q,k);
				break;
			} 
			case 2:{
				k=dequeue(&q);
				if(k!=-1)
				printf("Dequeued element is %d\n",k);
				break;
			}
			case 3:{
				display(&q);
				break;
			}
			case 4:{
				exit(0);
			}
			default :{
				printf("Invalid input\n");
				break;
			}
		}//End of switch
	}//End of while(1)
 }
 
 int enqueue(Q *q,int k)
 {
 	if(isfull(q))
 	{
 		printf("Stck Overflow\n");
 		return 0;
	 }
	 q->rear=(q->rear+1)%MAX;
	 q->a[q->rear]=k;
	 q->count++;
	 if(q->count==1)
	 	q->front=q->rear;
	 	return 0;
 }
 
 int dequeue (Q *q)
 {
 	int k;
 	if(isempty(q))
 		{
 		printf("Queue is Empty\n");
 		return -1;
		}
		k=q->a[q->front];
		q->front=(q->front+1)%MAX;
		q->count--;
		
		if(q->count==0)
			q->rear=q->front=-1;
			return k;	
 }

int isempty(Q *q)
{
	if(q->count==0)
	return 1;
	else 
	return 0;
}

int isfull(Q *q)
{
	if(q->count==MAX)
	return 1;
	return 0;
}

int display(Q *q)
{
	int i=q->front;
	int j=q->count;
	if(isempty(q))
	{
		printf("Queue is empty\n");
		return 0;
	}
	else
	{
		printf("Queue continues\n");
		while(j)
		{
			printf("%d\n",q->a[i]);
			i=(i+1)%MAX;
			j++;
		}
	}
}
